group 'net.corda.spikes.di-container-spike'
version '1.0-SNAPSHOT'

buildscript {
    ext.java_version = '1.8'
    ext.kotlin_version = '1.2.51'
    ext.junit_version = '5.2.0'
    ext.junit_gradle_plugin_version = '1.2.0'

    ext.spring_boot_version = '2.0.3.RELEASE'
    ext.spring_version = '5.0.0.RELEASE'
    ext.javax_annotation_api_version = '1.3.2'
    ext.javax_inject_version = '1'

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.junit.platform:junit-platform-gradle-plugin:$junit_gradle_plugin_version"
    }
}

apply plugin: 'java'
apply plugin: 'kotlin'

allprojects {

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'https://dl.bintray.com/kotlin/exposed' }
        maven { url 'https://jitpack.io' }
    }

    apply plugin: 'kotlin'
    apply plugin: 'idea'
    apply plugin: 'org.junit.platform.gradle.plugin'

    sourceCompatibility = java_version

    compileKotlin {
        kotlinOptions.jvmTarget = java_version
    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = java_version
    }

    junitPlatform {
        // comment here are the defaults
        // platformVersion '1.0.0'
        filters {
            engines {
                // include 'junit-jupiter', 'junit-vintage'
                // exclude 'custom-engine'
            }
            tags {
                // include 'fast'
                exclude 'slow'
            }
            // includeClassNamePattern '.*Test'
        }
        // enableStandardTestTask true
        // reportsDir file('build/test-results/junit-platform') // this is the default
    }

    dependencies {
        testCompile("org.junit.jupiter:junit-jupiter-api:$junit_version")
        testRuntime("org.junit.jupiter:junit-jupiter-engine:$junit_version")
    }
}

subprojects { it ->

    idea {
        module {
            downloadJavadoc = true // defaults to false
            downloadSources = true
        }
    }

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
        compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

        compile "javax.inject:javax.inject:$javax_inject_version"
        compile "javax.annotation:javax.annotation-api:$javax_annotation_api_version"

//        Test
        testCompile "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    }
}

def nodeCordappsPath = "${project.rootDir.path}" + File.separator + "node" + File.separator + "cordapps"
def nodePluginsPath = "${project.rootDir.path}" + File.separator + "node" + File.separator + "plugins"

clean.doFirst {
    file(nodePluginsPath).deleteDir()
    file(nodeCordappsPath).deleteDir()
}

clean.doLast {
    file(nodePluginsPath).mkdirs()
    file(nodeCordappsPath).mkdirs()
}